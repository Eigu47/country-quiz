// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Country {
    name         String      @id
    code         String      @unique
    capital      Capital?
    altSpellings String[]
    region       Region      @relation(fields: [regionId], references: [name], onUpdate: Cascade, onDelete: Cascade)
    regionId     RegionEnum
    subregion    Subregion[]
    languages    String[]
    borders      Country[]   @relation("CountryBorders")
    borderBy     Country[]   @relation("CountryBorders")
    area         Float
    population   Int
    map          String
    flag         String
}

model Capital {
    country   Country @relation(fields: [countryId], references: [name], onDelete: Cascade)
    countryId String  @unique
    name      String
    latlng    Float[]

    @@id([name, countryId])
}

model Region {
    name      RegionEnum @id
    countries Country[]
}

enum RegionEnum {
    Africa
    Americas
    Asia
    Europe
    NorthAmerica @map("North America")
    Oceania
    SouthAmerica @map("South America")
}

model Subregion {
    name      SubregionEnum @id
    countries Country[]
}

enum SubregionEnum {
    AustraliaAndNewZealand @map("Australia and New Zealand")
    Caribbean
    CentralAmerica         @map("Central America")
    CentralAsia            @map("Central Asia")
    CentralEurope          @map("Central Europe")
    EasternAfrica          @map("Eastern Africa")
    EasternAsia            @map("Eastern Asia")
    EasternEurope          @map("Eastern Europe")
    Melanesia
    Micronesia
    MiddleAfrica           @map("Middle Africa")
    NorthAmerica           @map("North America")
    NorthernAfrica         @map("Northern Africa")
    NorthernEurope         @map("Northern Europe")
    Polynesia
    SouthAmerica           @map("South America")
    SouthEasternAsia       @map("South-Eastern Asia")
    SoutheastEurope        @map("Southeast Europe")
    SouthernAfrica         @map("Southern Africa")
    SouthernAsia           @map("Southern Asia")
    SouthernEurope         @map("Southern Europe")
    WesternAfrica          @map("Western Africa")
    WesternAsia            @map("Western Asia")
    WesternEurope          @map("Western Europe")
}
